
# File name:
#		udp_latency_ipv4_test.cfg
#
# Description:
#	  
#
# Notes:
#		use command --cmd-file=examples/udp_latency_ipv4_test.cfg to start CLI
#

# Assuming a back to back topology with:
# PORT 0 - client port
# PORT 1 - server port

# Client port configuration
# Add the L3 interface on the client side
add tests l3_intf port 0 ip 192.168.100.178 mask 255.255.255.0

# Not required but add a default gw on the client side
add tests l3_gw port 0 gw 192.168.100.254

# Configure a TCP client test case (ID 0) on PORT 0
# from 192.168.100.178:[10001,13000] to 192.168.200.177:[6001,6200
add tests client udp port 0 test-case-id 0 src 192.168.100.178 192.168.100.178 sport 10001 13000 dest 192.168.200.177 192.168.200.177 dport 6001 6200

# Configure the timeout profile for test case ID 0 on PORT 0:
# initial-delay 0s start immediately
# uptime inifnite stay UP forever
# downtime 10s reconnect after 10 seconds if the connection went down
set tests timeouts port 0 test-case-id 0 init 0
set tests timeouts port 0 test-case-id 0 uptime infinite
set tests timeouts port 0 test-case-id 0 downtime 10

# Configure the ipv4 timestamp for test case ID 0 on PORT 0:
set tests ipv4-options port 0 test-case-id 0 tx-timestamp 1
set tests ipv4-options port 0 test-case-id 0 rx-timestamp 1

# Configure a setup rate limit of 1M sess/s
# Also a send rate limit of 900K sess/s (for sending data traffic)
set tests rate port 0 test-case-id 0 open 1000000
set tests rate port 0 test-case-id 0 send  900000

# Let the test run for 2 minutes (120s):
# criteria: run-time
set tests criteria port 0 test-case-id 0 run-time 100

# Configure RAW clients to perform a request with size 1000 bytes and wait
# for 4000 bytes responses for test case ID 0 on PORT 0:
set tests client raw port 0 test-case-id 0 data-req-plen 1000 data-resp-plen 4000


# Enable recent latency window of 100 samples and set options for latency display
# In particular, each time that latency will be more than 0 a counter will be
# incremented, each time that latency average will be over 0, same
set tests latency port 0 test-case-id 0 max 0 max-avg 0 samples 1




# Server port configuration
# Add the L3 interface on the server side
add tests l3_intf port 1 ip 192.168.200.177 mask 255.255.255.0

# Not required but add a default gw on the server side
add tests l3_gw port 1 gw 192.168.200.166

# Configure a TCP server test case (ID 0) on PORT 1
# accepting connections on 192.168.200.177:[6001,6200]
add tests server udp port 1 test-case-id 0 src 192.168.200.177 192.168.200.177 sport 6001 6200

# Configure the ipv4 timestamp for test case ID 0 on PORT 0:
set tests ipv4-options port 1 test-case-id 0 rx-timestamp 1
set tests ipv4-options port 1 test-case-id 0 tx-timestamp 1

# Configure RAW servers to respond to requests of size 1000 bytes with
# responses of size 4000 bytes:
set tests server raw port 1 test-case-id 0 data-req-plen 1000 data-resp-plen 4000


# Enable recent latency window of 100 samples and set options for latency display
# In particular, each time that latency will be more than 0 a counter will be
# incremented, each time that latency average will be over 0, same
set tests latency port 1 test-case-id 0 max 0 max-avg 0 samples 1





# Start the tests on PORT 1 (servers in this case)
start tests port 1

# Start the tests on PORT 0 (clients in this case)
start tests port 0

# Show the UI window
show tests ui

